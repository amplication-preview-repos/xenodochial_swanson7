/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { HouseholdsCharacteristics } from "./HouseholdsCharacteristics";
import { HouseholdsCharacteristicsCountArgs } from "./HouseholdsCharacteristicsCountArgs";
import { HouseholdsCharacteristicsFindManyArgs } from "./HouseholdsCharacteristicsFindManyArgs";
import { HouseholdsCharacteristicsFindUniqueArgs } from "./HouseholdsCharacteristicsFindUniqueArgs";
import { CreateHouseholdsCharacteristicsArgs } from "./CreateHouseholdsCharacteristicsArgs";
import { UpdateHouseholdsCharacteristicsArgs } from "./UpdateHouseholdsCharacteristicsArgs";
import { DeleteHouseholdsCharacteristicsArgs } from "./DeleteHouseholdsCharacteristicsArgs";
import { HouseholdsCharacteristicsService } from "../householdsCharacteristics.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HouseholdsCharacteristics)
export class HouseholdsCharacteristicsResolverBase {
  constructor(
    protected readonly service: HouseholdsCharacteristicsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HouseholdsCharacteristics",
    action: "read",
    possession: "any",
  })
  async _householdsCharacteristicsItemsMeta(
    @graphql.Args() args: HouseholdsCharacteristicsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HouseholdsCharacteristics])
  @nestAccessControl.UseRoles({
    resource: "HouseholdsCharacteristics",
    action: "read",
    possession: "any",
  })
  async householdsCharacteristicsItems(
    @graphql.Args() args: HouseholdsCharacteristicsFindManyArgs
  ): Promise<HouseholdsCharacteristics[]> {
    return this.service.householdsCharacteristicsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HouseholdsCharacteristics, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HouseholdsCharacteristics",
    action: "read",
    possession: "own",
  })
  async householdsCharacteristics(
    @graphql.Args() args: HouseholdsCharacteristicsFindUniqueArgs
  ): Promise<HouseholdsCharacteristics | null> {
    const result = await this.service.householdsCharacteristics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HouseholdsCharacteristics)
  @nestAccessControl.UseRoles({
    resource: "HouseholdsCharacteristics",
    action: "create",
    possession: "any",
  })
  async createHouseholdsCharacteristics(
    @graphql.Args() args: CreateHouseholdsCharacteristicsArgs
  ): Promise<HouseholdsCharacteristics> {
    return await this.service.createHouseholdsCharacteristics({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HouseholdsCharacteristics)
  @nestAccessControl.UseRoles({
    resource: "HouseholdsCharacteristics",
    action: "update",
    possession: "any",
  })
  async updateHouseholdsCharacteristics(
    @graphql.Args() args: UpdateHouseholdsCharacteristicsArgs
  ): Promise<HouseholdsCharacteristics | null> {
    try {
      return await this.service.updateHouseholdsCharacteristics({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HouseholdsCharacteristics)
  @nestAccessControl.UseRoles({
    resource: "HouseholdsCharacteristics",
    action: "delete",
    possession: "any",
  })
  async deleteHouseholdsCharacteristics(
    @graphql.Args() args: DeleteHouseholdsCharacteristicsArgs
  ): Promise<HouseholdsCharacteristics | null> {
    try {
      return await this.service.deleteHouseholdsCharacteristics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
