/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WaterAndSanitation } from "./WaterAndSanitation";
import { WaterAndSanitationCountArgs } from "./WaterAndSanitationCountArgs";
import { WaterAndSanitationFindManyArgs } from "./WaterAndSanitationFindManyArgs";
import { WaterAndSanitationFindUniqueArgs } from "./WaterAndSanitationFindUniqueArgs";
import { CreateWaterAndSanitationArgs } from "./CreateWaterAndSanitationArgs";
import { UpdateWaterAndSanitationArgs } from "./UpdateWaterAndSanitationArgs";
import { DeleteWaterAndSanitationArgs } from "./DeleteWaterAndSanitationArgs";
import { WaterAndSanitationService } from "../waterAndSanitation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WaterAndSanitation)
export class WaterAndSanitationResolverBase {
  constructor(
    protected readonly service: WaterAndSanitationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WaterAndSanitation",
    action: "read",
    possession: "any",
  })
  async _waterAndSanitationsMeta(
    @graphql.Args() args: WaterAndSanitationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WaterAndSanitation])
  @nestAccessControl.UseRoles({
    resource: "WaterAndSanitation",
    action: "read",
    possession: "any",
  })
  async waterAndSanitations(
    @graphql.Args() args: WaterAndSanitationFindManyArgs
  ): Promise<WaterAndSanitation[]> {
    return this.service.waterAndSanitations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WaterAndSanitation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WaterAndSanitation",
    action: "read",
    possession: "own",
  })
  async waterAndSanitation(
    @graphql.Args() args: WaterAndSanitationFindUniqueArgs
  ): Promise<WaterAndSanitation | null> {
    const result = await this.service.waterAndSanitation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WaterAndSanitation)
  @nestAccessControl.UseRoles({
    resource: "WaterAndSanitation",
    action: "create",
    possession: "any",
  })
  async createWaterAndSanitation(
    @graphql.Args() args: CreateWaterAndSanitationArgs
  ): Promise<WaterAndSanitation> {
    return await this.service.createWaterAndSanitation({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WaterAndSanitation)
  @nestAccessControl.UseRoles({
    resource: "WaterAndSanitation",
    action: "update",
    possession: "any",
  })
  async updateWaterAndSanitation(
    @graphql.Args() args: UpdateWaterAndSanitationArgs
  ): Promise<WaterAndSanitation | null> {
    try {
      return await this.service.updateWaterAndSanitation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WaterAndSanitation)
  @nestAccessControl.UseRoles({
    resource: "WaterAndSanitation",
    action: "delete",
    possession: "any",
  })
  async deleteWaterAndSanitation(
    @graphql.Args() args: DeleteWaterAndSanitationArgs
  ): Promise<WaterAndSanitation | null> {
    try {
      return await this.service.deleteWaterAndSanitation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
