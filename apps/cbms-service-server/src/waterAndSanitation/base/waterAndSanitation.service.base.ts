/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  WaterAndSanitation as PrismaWaterAndSanitation,
} from "@prisma/client";

export class WaterAndSanitationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WaterAndSanitationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.waterAndSanitation.count(args);
  }

  async waterAndSanitations(
    args: Prisma.WaterAndSanitationFindManyArgs
  ): Promise<PrismaWaterAndSanitation[]> {
    return this.prisma.waterAndSanitation.findMany(args);
  }
  async waterAndSanitation(
    args: Prisma.WaterAndSanitationFindUniqueArgs
  ): Promise<PrismaWaterAndSanitation | null> {
    return this.prisma.waterAndSanitation.findUnique(args);
  }
  async createWaterAndSanitation(
    args: Prisma.WaterAndSanitationCreateArgs
  ): Promise<PrismaWaterAndSanitation> {
    return this.prisma.waterAndSanitation.create(args);
  }
  async updateWaterAndSanitation(
    args: Prisma.WaterAndSanitationUpdateArgs
  ): Promise<PrismaWaterAndSanitation> {
    return this.prisma.waterAndSanitation.update(args);
  }
  async deleteWaterAndSanitation(
    args: Prisma.WaterAndSanitationDeleteArgs
  ): Promise<PrismaWaterAndSanitation> {
    return this.prisma.waterAndSanitation.delete(args);
  }
}
