/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SourceOfIncome } from "./SourceOfIncome";
import { SourceOfIncomeCountArgs } from "./SourceOfIncomeCountArgs";
import { SourceOfIncomeFindManyArgs } from "./SourceOfIncomeFindManyArgs";
import { SourceOfIncomeFindUniqueArgs } from "./SourceOfIncomeFindUniqueArgs";
import { CreateSourceOfIncomeArgs } from "./CreateSourceOfIncomeArgs";
import { UpdateSourceOfIncomeArgs } from "./UpdateSourceOfIncomeArgs";
import { DeleteSourceOfIncomeArgs } from "./DeleteSourceOfIncomeArgs";
import { SourceOfIncomeService } from "../sourceOfIncome.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SourceOfIncome)
export class SourceOfIncomeResolverBase {
  constructor(
    protected readonly service: SourceOfIncomeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SourceOfIncome",
    action: "read",
    possession: "any",
  })
  async _sourceOfIncomesMeta(
    @graphql.Args() args: SourceOfIncomeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SourceOfIncome])
  @nestAccessControl.UseRoles({
    resource: "SourceOfIncome",
    action: "read",
    possession: "any",
  })
  async sourceOfIncomes(
    @graphql.Args() args: SourceOfIncomeFindManyArgs
  ): Promise<SourceOfIncome[]> {
    return this.service.sourceOfIncomes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SourceOfIncome, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SourceOfIncome",
    action: "read",
    possession: "own",
  })
  async sourceOfIncome(
    @graphql.Args() args: SourceOfIncomeFindUniqueArgs
  ): Promise<SourceOfIncome | null> {
    const result = await this.service.sourceOfIncome(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SourceOfIncome)
  @nestAccessControl.UseRoles({
    resource: "SourceOfIncome",
    action: "create",
    possession: "any",
  })
  async createSourceOfIncome(
    @graphql.Args() args: CreateSourceOfIncomeArgs
  ): Promise<SourceOfIncome> {
    return await this.service.createSourceOfIncome({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SourceOfIncome)
  @nestAccessControl.UseRoles({
    resource: "SourceOfIncome",
    action: "update",
    possession: "any",
  })
  async updateSourceOfIncome(
    @graphql.Args() args: UpdateSourceOfIncomeArgs
  ): Promise<SourceOfIncome | null> {
    try {
      return await this.service.updateSourceOfIncome({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SourceOfIncome)
  @nestAccessControl.UseRoles({
    resource: "SourceOfIncome",
    action: "delete",
    possession: "any",
  })
  async deleteSourceOfIncome(
    @graphql.Args() args: DeleteSourceOfIncomeArgs
  ): Promise<SourceOfIncome | null> {
    try {
      return await this.service.deleteSourceOfIncome(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
