/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SourceOfIncome as PrismaSourceOfIncome } from "@prisma/client";

export class SourceOfIncomeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SourceOfIncomeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.sourceOfIncome.count(args);
  }

  async sourceOfIncomes(
    args: Prisma.SourceOfIncomeFindManyArgs
  ): Promise<PrismaSourceOfIncome[]> {
    return this.prisma.sourceOfIncome.findMany(args);
  }
  async sourceOfIncome(
    args: Prisma.SourceOfIncomeFindUniqueArgs
  ): Promise<PrismaSourceOfIncome | null> {
    return this.prisma.sourceOfIncome.findUnique(args);
  }
  async createSourceOfIncome(
    args: Prisma.SourceOfIncomeCreateArgs
  ): Promise<PrismaSourceOfIncome> {
    return this.prisma.sourceOfIncome.create(args);
  }
  async updateSourceOfIncome(
    args: Prisma.SourceOfIncomeUpdateArgs
  ): Promise<PrismaSourceOfIncome> {
    return this.prisma.sourceOfIncome.update(args);
  }
  async deleteSourceOfIncome(
    args: Prisma.SourceOfIncomeDeleteArgs
  ): Promise<PrismaSourceOfIncome> {
    return this.prisma.sourceOfIncome.delete(args);
  }
}
