/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CropFarming } from "./CropFarming";
import { CropFarmingCountArgs } from "./CropFarmingCountArgs";
import { CropFarmingFindManyArgs } from "./CropFarmingFindManyArgs";
import { CropFarmingFindUniqueArgs } from "./CropFarmingFindUniqueArgs";
import { CreateCropFarmingArgs } from "./CreateCropFarmingArgs";
import { UpdateCropFarmingArgs } from "./UpdateCropFarmingArgs";
import { DeleteCropFarmingArgs } from "./DeleteCropFarmingArgs";
import { CropFarmingService } from "../cropFarming.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CropFarming)
export class CropFarmingResolverBase {
  constructor(
    protected readonly service: CropFarmingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CropFarming",
    action: "read",
    possession: "any",
  })
  async _cropFarmingsMeta(
    @graphql.Args() args: CropFarmingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CropFarming])
  @nestAccessControl.UseRoles({
    resource: "CropFarming",
    action: "read",
    possession: "any",
  })
  async cropFarmings(
    @graphql.Args() args: CropFarmingFindManyArgs
  ): Promise<CropFarming[]> {
    return this.service.cropFarmings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CropFarming, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CropFarming",
    action: "read",
    possession: "own",
  })
  async cropFarming(
    @graphql.Args() args: CropFarmingFindUniqueArgs
  ): Promise<CropFarming | null> {
    const result = await this.service.cropFarming(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CropFarming)
  @nestAccessControl.UseRoles({
    resource: "CropFarming",
    action: "create",
    possession: "any",
  })
  async createCropFarming(
    @graphql.Args() args: CreateCropFarmingArgs
  ): Promise<CropFarming> {
    return await this.service.createCropFarming({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CropFarming)
  @nestAccessControl.UseRoles({
    resource: "CropFarming",
    action: "update",
    possession: "any",
  })
  async updateCropFarming(
    @graphql.Args() args: UpdateCropFarmingArgs
  ): Promise<CropFarming | null> {
    try {
      return await this.service.updateCropFarming({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CropFarming)
  @nestAccessControl.UseRoles({
    resource: "CropFarming",
    action: "delete",
    possession: "any",
  })
  async deleteCropFarming(
    @graphql.Args() args: DeleteCropFarmingArgs
  ): Promise<CropFarming | null> {
    try {
      return await this.service.deleteCropFarming(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
