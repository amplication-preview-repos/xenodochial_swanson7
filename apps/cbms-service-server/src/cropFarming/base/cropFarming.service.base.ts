/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CropFarming as PrismaCropFarming } from "@prisma/client";

export class CropFarmingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CropFarmingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cropFarming.count(args);
  }

  async cropFarmings(
    args: Prisma.CropFarmingFindManyArgs
  ): Promise<PrismaCropFarming[]> {
    return this.prisma.cropFarming.findMany(args);
  }
  async cropFarming(
    args: Prisma.CropFarmingFindUniqueArgs
  ): Promise<PrismaCropFarming | null> {
    return this.prisma.cropFarming.findUnique(args);
  }
  async createCropFarming(
    args: Prisma.CropFarmingCreateArgs
  ): Promise<PrismaCropFarming> {
    return this.prisma.cropFarming.create(args);
  }
  async updateCropFarming(
    args: Prisma.CropFarmingUpdateArgs
  ): Promise<PrismaCropFarming> {
    return this.prisma.cropFarming.update(args);
  }
  async deleteCropFarming(
    args: Prisma.CropFarmingDeleteArgs
  ): Promise<PrismaCropFarming> {
    return this.prisma.cropFarming.delete(args);
  }
}
