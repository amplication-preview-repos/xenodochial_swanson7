/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EducationAndLiteracy } from "./EducationAndLiteracy";
import { EducationAndLiteracyCountArgs } from "./EducationAndLiteracyCountArgs";
import { EducationAndLiteracyFindManyArgs } from "./EducationAndLiteracyFindManyArgs";
import { EducationAndLiteracyFindUniqueArgs } from "./EducationAndLiteracyFindUniqueArgs";
import { CreateEducationAndLiteracyArgs } from "./CreateEducationAndLiteracyArgs";
import { UpdateEducationAndLiteracyArgs } from "./UpdateEducationAndLiteracyArgs";
import { DeleteEducationAndLiteracyArgs } from "./DeleteEducationAndLiteracyArgs";
import { EducationAndLiteracyService } from "../educationAndLiteracy.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EducationAndLiteracy)
export class EducationAndLiteracyResolverBase {
  constructor(
    protected readonly service: EducationAndLiteracyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EducationAndLiteracy",
    action: "read",
    possession: "any",
  })
  async _educationAndLiteraciesMeta(
    @graphql.Args() args: EducationAndLiteracyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EducationAndLiteracy])
  @nestAccessControl.UseRoles({
    resource: "EducationAndLiteracy",
    action: "read",
    possession: "any",
  })
  async educationAndLiteracies(
    @graphql.Args() args: EducationAndLiteracyFindManyArgs
  ): Promise<EducationAndLiteracy[]> {
    return this.service.educationAndLiteracies(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EducationAndLiteracy, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EducationAndLiteracy",
    action: "read",
    possession: "own",
  })
  async educationAndLiteracy(
    @graphql.Args() args: EducationAndLiteracyFindUniqueArgs
  ): Promise<EducationAndLiteracy | null> {
    const result = await this.service.educationAndLiteracy(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EducationAndLiteracy)
  @nestAccessControl.UseRoles({
    resource: "EducationAndLiteracy",
    action: "create",
    possession: "any",
  })
  async createEducationAndLiteracy(
    @graphql.Args() args: CreateEducationAndLiteracyArgs
  ): Promise<EducationAndLiteracy> {
    return await this.service.createEducationAndLiteracy({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EducationAndLiteracy)
  @nestAccessControl.UseRoles({
    resource: "EducationAndLiteracy",
    action: "update",
    possession: "any",
  })
  async updateEducationAndLiteracy(
    @graphql.Args() args: UpdateEducationAndLiteracyArgs
  ): Promise<EducationAndLiteracy | null> {
    try {
      return await this.service.updateEducationAndLiteracy({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EducationAndLiteracy)
  @nestAccessControl.UseRoles({
    resource: "EducationAndLiteracy",
    action: "delete",
    possession: "any",
  })
  async deleteEducationAndLiteracy(
    @graphql.Args() args: DeleteEducationAndLiteracyArgs
  ): Promise<EducationAndLiteracy | null> {
    try {
      return await this.service.deleteEducationAndLiteracy(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
