/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SalariesAndWages } from "./SalariesAndWages";
import { SalariesAndWagesCountArgs } from "./SalariesAndWagesCountArgs";
import { SalariesAndWagesFindManyArgs } from "./SalariesAndWagesFindManyArgs";
import { SalariesAndWagesFindUniqueArgs } from "./SalariesAndWagesFindUniqueArgs";
import { CreateSalariesAndWagesArgs } from "./CreateSalariesAndWagesArgs";
import { UpdateSalariesAndWagesArgs } from "./UpdateSalariesAndWagesArgs";
import { DeleteSalariesAndWagesArgs } from "./DeleteSalariesAndWagesArgs";
import { SalariesAndWagesService } from "../salariesAndWages.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SalariesAndWages)
export class SalariesAndWagesResolverBase {
  constructor(
    protected readonly service: SalariesAndWagesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SalariesAndWages",
    action: "read",
    possession: "any",
  })
  async _salariesAndWagesItemsMeta(
    @graphql.Args() args: SalariesAndWagesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SalariesAndWages])
  @nestAccessControl.UseRoles({
    resource: "SalariesAndWages",
    action: "read",
    possession: "any",
  })
  async salariesAndWagesItems(
    @graphql.Args() args: SalariesAndWagesFindManyArgs
  ): Promise<SalariesAndWages[]> {
    return this.service.salariesAndWagesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SalariesAndWages, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SalariesAndWages",
    action: "read",
    possession: "own",
  })
  async salariesAndWages(
    @graphql.Args() args: SalariesAndWagesFindUniqueArgs
  ): Promise<SalariesAndWages | null> {
    const result = await this.service.salariesAndWages(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalariesAndWages)
  @nestAccessControl.UseRoles({
    resource: "SalariesAndWages",
    action: "create",
    possession: "any",
  })
  async createSalariesAndWages(
    @graphql.Args() args: CreateSalariesAndWagesArgs
  ): Promise<SalariesAndWages> {
    return await this.service.createSalariesAndWages({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalariesAndWages)
  @nestAccessControl.UseRoles({
    resource: "SalariesAndWages",
    action: "update",
    possession: "any",
  })
  async updateSalariesAndWages(
    @graphql.Args() args: UpdateSalariesAndWagesArgs
  ): Promise<SalariesAndWages | null> {
    try {
      return await this.service.updateSalariesAndWages({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalariesAndWages)
  @nestAccessControl.UseRoles({
    resource: "SalariesAndWages",
    action: "delete",
    possession: "any",
  })
  async deleteSalariesAndWages(
    @graphql.Args() args: DeleteSalariesAndWagesArgs
  ): Promise<SalariesAndWages | null> {
    try {
      return await this.service.deleteSalariesAndWages(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
