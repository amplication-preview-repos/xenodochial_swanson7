/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PoliticalParticipation } from "./PoliticalParticipation";
import { PoliticalParticipationCountArgs } from "./PoliticalParticipationCountArgs";
import { PoliticalParticipationFindManyArgs } from "./PoliticalParticipationFindManyArgs";
import { PoliticalParticipationFindUniqueArgs } from "./PoliticalParticipationFindUniqueArgs";
import { CreatePoliticalParticipationArgs } from "./CreatePoliticalParticipationArgs";
import { UpdatePoliticalParticipationArgs } from "./UpdatePoliticalParticipationArgs";
import { DeletePoliticalParticipationArgs } from "./DeletePoliticalParticipationArgs";
import { PoliticalParticipationService } from "../politicalParticipation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PoliticalParticipation)
export class PoliticalParticipationResolverBase {
  constructor(
    protected readonly service: PoliticalParticipationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PoliticalParticipation",
    action: "read",
    possession: "any",
  })
  async _politicalParticipationsMeta(
    @graphql.Args() args: PoliticalParticipationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PoliticalParticipation])
  @nestAccessControl.UseRoles({
    resource: "PoliticalParticipation",
    action: "read",
    possession: "any",
  })
  async politicalParticipations(
    @graphql.Args() args: PoliticalParticipationFindManyArgs
  ): Promise<PoliticalParticipation[]> {
    return this.service.politicalParticipations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PoliticalParticipation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PoliticalParticipation",
    action: "read",
    possession: "own",
  })
  async politicalParticipation(
    @graphql.Args() args: PoliticalParticipationFindUniqueArgs
  ): Promise<PoliticalParticipation | null> {
    const result = await this.service.politicalParticipation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PoliticalParticipation)
  @nestAccessControl.UseRoles({
    resource: "PoliticalParticipation",
    action: "create",
    possession: "any",
  })
  async createPoliticalParticipation(
    @graphql.Args() args: CreatePoliticalParticipationArgs
  ): Promise<PoliticalParticipation> {
    return await this.service.createPoliticalParticipation({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PoliticalParticipation)
  @nestAccessControl.UseRoles({
    resource: "PoliticalParticipation",
    action: "update",
    possession: "any",
  })
  async updatePoliticalParticipation(
    @graphql.Args() args: UpdatePoliticalParticipationArgs
  ): Promise<PoliticalParticipation | null> {
    try {
      return await this.service.updatePoliticalParticipation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PoliticalParticipation)
  @nestAccessControl.UseRoles({
    resource: "PoliticalParticipation",
    action: "delete",
    possession: "any",
  })
  async deletePoliticalParticipation(
    @graphql.Args() args: DeletePoliticalParticipationArgs
  ): Promise<PoliticalParticipation | null> {
    try {
      return await this.service.deletePoliticalParticipation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
