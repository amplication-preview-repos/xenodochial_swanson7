/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PoliticalParticipation as PrismaPoliticalParticipation,
} from "@prisma/client";

export class PoliticalParticipationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PoliticalParticipationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.politicalParticipation.count(args);
  }

  async politicalParticipations(
    args: Prisma.PoliticalParticipationFindManyArgs
  ): Promise<PrismaPoliticalParticipation[]> {
    return this.prisma.politicalParticipation.findMany(args);
  }
  async politicalParticipation(
    args: Prisma.PoliticalParticipationFindUniqueArgs
  ): Promise<PrismaPoliticalParticipation | null> {
    return this.prisma.politicalParticipation.findUnique(args);
  }
  async createPoliticalParticipation(
    args: Prisma.PoliticalParticipationCreateArgs
  ): Promise<PrismaPoliticalParticipation> {
    return this.prisma.politicalParticipation.create(args);
  }
  async updatePoliticalParticipation(
    args: Prisma.PoliticalParticipationUpdateArgs
  ): Promise<PrismaPoliticalParticipation> {
    return this.prisma.politicalParticipation.update(args);
  }
  async deletePoliticalParticipation(
    args: Prisma.PoliticalParticipationDeleteArgs
  ): Promise<PrismaPoliticalParticipation> {
    return this.prisma.politicalParticipation.delete(args);
  }
}
