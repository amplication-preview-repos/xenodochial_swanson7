/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PoliticalParticipationService } from "../politicalParticipation.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PoliticalParticipationCreateInput } from "./PoliticalParticipationCreateInput";
import { PoliticalParticipation } from "./PoliticalParticipation";
import { PoliticalParticipationFindManyArgs } from "./PoliticalParticipationFindManyArgs";
import { PoliticalParticipationWhereUniqueInput } from "./PoliticalParticipationWhereUniqueInput";
import { PoliticalParticipationUpdateInput } from "./PoliticalParticipationUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PoliticalParticipationControllerBase {
  constructor(
    protected readonly service: PoliticalParticipationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PoliticalParticipation })
  @nestAccessControl.UseRoles({
    resource: "PoliticalParticipation",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPoliticalParticipation(
    @common.Body() data: PoliticalParticipationCreateInput
  ): Promise<PoliticalParticipation> {
    return await this.service.createPoliticalParticipation({
      data: data,
      select: {
        activeInCommunityOrganizations: true,
        createdAt: true,
        hasVotedInLastElection: true,
        id: true,
        interestInPublicOffice: true,
        participationInPoliticalRallies: true,
        politicalPartyAffiliation: true,
        updatedAt: true,
        voterRegistrationStatus: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PoliticalParticipation] })
  @ApiNestedQuery(PoliticalParticipationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PoliticalParticipation",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async politicalParticipations(
    @common.Req() request: Request
  ): Promise<PoliticalParticipation[]> {
    const args = plainToClass(
      PoliticalParticipationFindManyArgs,
      request.query
    );
    return this.service.politicalParticipations({
      ...args,
      select: {
        activeInCommunityOrganizations: true,
        createdAt: true,
        hasVotedInLastElection: true,
        id: true,
        interestInPublicOffice: true,
        participationInPoliticalRallies: true,
        politicalPartyAffiliation: true,
        updatedAt: true,
        voterRegistrationStatus: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PoliticalParticipation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PoliticalParticipation",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async politicalParticipation(
    @common.Param() params: PoliticalParticipationWhereUniqueInput
  ): Promise<PoliticalParticipation | null> {
    const result = await this.service.politicalParticipation({
      where: params,
      select: {
        activeInCommunityOrganizations: true,
        createdAt: true,
        hasVotedInLastElection: true,
        id: true,
        interestInPublicOffice: true,
        participationInPoliticalRallies: true,
        politicalPartyAffiliation: true,
        updatedAt: true,
        voterRegistrationStatus: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PoliticalParticipation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PoliticalParticipation",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePoliticalParticipation(
    @common.Param() params: PoliticalParticipationWhereUniqueInput,
    @common.Body() data: PoliticalParticipationUpdateInput
  ): Promise<PoliticalParticipation | null> {
    try {
      return await this.service.updatePoliticalParticipation({
        where: params,
        data: data,
        select: {
          activeInCommunityOrganizations: true,
          createdAt: true,
          hasVotedInLastElection: true,
          id: true,
          interestInPublicOffice: true,
          participationInPoliticalRallies: true,
          politicalPartyAffiliation: true,
          updatedAt: true,
          voterRegistrationStatus: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PoliticalParticipation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PoliticalParticipation",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePoliticalParticipation(
    @common.Param() params: PoliticalParticipationWhereUniqueInput
  ): Promise<PoliticalParticipation | null> {
    try {
      return await this.service.deletePoliticalParticipation({
        where: params,
        select: {
          activeInCommunityOrganizations: true,
          createdAt: true,
          hasVotedInLastElection: true,
          id: true,
          interestInPublicOffice: true,
          participationInPoliticalRallies: true,
          politicalPartyAffiliation: true,
          updatedAt: true,
          voterRegistrationStatus: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
