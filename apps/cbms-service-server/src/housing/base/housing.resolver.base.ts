/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Housing } from "./Housing";
import { HousingCountArgs } from "./HousingCountArgs";
import { HousingFindManyArgs } from "./HousingFindManyArgs";
import { HousingFindUniqueArgs } from "./HousingFindUniqueArgs";
import { CreateHousingArgs } from "./CreateHousingArgs";
import { UpdateHousingArgs } from "./UpdateHousingArgs";
import { DeleteHousingArgs } from "./DeleteHousingArgs";
import { HousingService } from "../housing.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Housing)
export class HousingResolverBase {
  constructor(
    protected readonly service: HousingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Housing",
    action: "read",
    possession: "any",
  })
  async _housingsMeta(
    @graphql.Args() args: HousingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Housing])
  @nestAccessControl.UseRoles({
    resource: "Housing",
    action: "read",
    possession: "any",
  })
  async housings(
    @graphql.Args() args: HousingFindManyArgs
  ): Promise<Housing[]> {
    return this.service.housings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Housing, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Housing",
    action: "read",
    possession: "own",
  })
  async housing(
    @graphql.Args() args: HousingFindUniqueArgs
  ): Promise<Housing | null> {
    const result = await this.service.housing(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Housing)
  @nestAccessControl.UseRoles({
    resource: "Housing",
    action: "create",
    possession: "any",
  })
  async createHousing(
    @graphql.Args() args: CreateHousingArgs
  ): Promise<Housing> {
    return await this.service.createHousing({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Housing)
  @nestAccessControl.UseRoles({
    resource: "Housing",
    action: "update",
    possession: "any",
  })
  async updateHousing(
    @graphql.Args() args: UpdateHousingArgs
  ): Promise<Housing | null> {
    try {
      return await this.service.updateHousing({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Housing)
  @nestAccessControl.UseRoles({
    resource: "Housing",
    action: "delete",
    possession: "any",
  })
  async deleteHousing(
    @graphql.Args() args: DeleteHousingArgs
  ): Promise<Housing | null> {
    try {
      return await this.service.deleteHousing(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
