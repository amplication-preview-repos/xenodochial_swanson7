/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DemographyService } from "../demography.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DemographyCreateInput } from "./DemographyCreateInput";
import { Demography } from "./Demography";
import { DemographyFindManyArgs } from "./DemographyFindManyArgs";
import { DemographyWhereUniqueInput } from "./DemographyWhereUniqueInput";
import { DemographyUpdateInput } from "./DemographyUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DemographyControllerBase {
  constructor(
    protected readonly service: DemographyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Demography })
  @nestAccessControl.UseRoles({
    resource: "Demography",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createDemography(
    @common.Body() data: DemographyCreateInput
  ): Promise<Demography> {
    return await this.service.createDemography({
      data: data,
      select: {
        age: true,
        citizenship: true,
        createdAt: true,
        disabilityStatus: true,
        educationalAttainment: true,
        employmentStatus: true,
        ethnicity: true,
        gender: true,
        id: true,
        maritalStatus: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Demography] })
  @ApiNestedQuery(DemographyFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Demography",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async demographies(@common.Req() request: Request): Promise<Demography[]> {
    const args = plainToClass(DemographyFindManyArgs, request.query);
    return this.service.demographies({
      ...args,
      select: {
        age: true,
        citizenship: true,
        createdAt: true,
        disabilityStatus: true,
        educationalAttainment: true,
        employmentStatus: true,
        ethnicity: true,
        gender: true,
        id: true,
        maritalStatus: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Demography })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Demography",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async demography(
    @common.Param() params: DemographyWhereUniqueInput
  ): Promise<Demography | null> {
    const result = await this.service.demography({
      where: params,
      select: {
        age: true,
        citizenship: true,
        createdAt: true,
        disabilityStatus: true,
        educationalAttainment: true,
        employmentStatus: true,
        ethnicity: true,
        gender: true,
        id: true,
        maritalStatus: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Demography })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Demography",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateDemography(
    @common.Param() params: DemographyWhereUniqueInput,
    @common.Body() data: DemographyUpdateInput
  ): Promise<Demography | null> {
    try {
      return await this.service.updateDemography({
        where: params,
        data: data,
        select: {
          age: true,
          citizenship: true,
          createdAt: true,
          disabilityStatus: true,
          educationalAttainment: true,
          employmentStatus: true,
          ethnicity: true,
          gender: true,
          id: true,
          maritalStatus: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Demography })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Demography",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDemography(
    @common.Param() params: DemographyWhereUniqueInput
  ): Promise<Demography | null> {
    try {
      return await this.service.deleteDemography({
        where: params,
        select: {
          age: true,
          citizenship: true,
          createdAt: true,
          disabilityStatus: true,
          educationalAttainment: true,
          employmentStatus: true,
          ethnicity: true,
          gender: true,
          id: true,
          maritalStatus: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
