/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Demography } from "./Demography";
import { DemographyCountArgs } from "./DemographyCountArgs";
import { DemographyFindManyArgs } from "./DemographyFindManyArgs";
import { DemographyFindUniqueArgs } from "./DemographyFindUniqueArgs";
import { CreateDemographyArgs } from "./CreateDemographyArgs";
import { UpdateDemographyArgs } from "./UpdateDemographyArgs";
import { DeleteDemographyArgs } from "./DeleteDemographyArgs";
import { DemographyService } from "../demography.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Demography)
export class DemographyResolverBase {
  constructor(
    protected readonly service: DemographyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Demography",
    action: "read",
    possession: "any",
  })
  async _demographiesMeta(
    @graphql.Args() args: DemographyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Demography])
  @nestAccessControl.UseRoles({
    resource: "Demography",
    action: "read",
    possession: "any",
  })
  async demographies(
    @graphql.Args() args: DemographyFindManyArgs
  ): Promise<Demography[]> {
    return this.service.demographies(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Demography, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Demography",
    action: "read",
    possession: "own",
  })
  async demography(
    @graphql.Args() args: DemographyFindUniqueArgs
  ): Promise<Demography | null> {
    const result = await this.service.demography(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Demography)
  @nestAccessControl.UseRoles({
    resource: "Demography",
    action: "create",
    possession: "any",
  })
  async createDemography(
    @graphql.Args() args: CreateDemographyArgs
  ): Promise<Demography> {
    return await this.service.createDemography({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Demography)
  @nestAccessControl.UseRoles({
    resource: "Demography",
    action: "update",
    possession: "any",
  })
  async updateDemography(
    @graphql.Args() args: UpdateDemographyArgs
  ): Promise<Demography | null> {
    try {
      return await this.service.updateDemography({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Demography)
  @nestAccessControl.UseRoles({
    resource: "Demography",
    action: "delete",
    possession: "any",
  })
  async deleteDemography(
    @graphql.Args() args: DeleteDemographyArgs
  ): Promise<Demography | null> {
    try {
      return await this.service.deleteDemography(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
