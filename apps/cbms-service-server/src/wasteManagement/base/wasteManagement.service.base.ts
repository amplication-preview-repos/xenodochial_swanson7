/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  WasteManagement as PrismaWasteManagement,
} from "@prisma/client";

export class WasteManagementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WasteManagementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.wasteManagement.count(args);
  }

  async wasteManagements(
    args: Prisma.WasteManagementFindManyArgs
  ): Promise<PrismaWasteManagement[]> {
    return this.prisma.wasteManagement.findMany(args);
  }
  async wasteManagement(
    args: Prisma.WasteManagementFindUniqueArgs
  ): Promise<PrismaWasteManagement | null> {
    return this.prisma.wasteManagement.findUnique(args);
  }
  async createWasteManagement(
    args: Prisma.WasteManagementCreateArgs
  ): Promise<PrismaWasteManagement> {
    return this.prisma.wasteManagement.create(args);
  }
  async updateWasteManagement(
    args: Prisma.WasteManagementUpdateArgs
  ): Promise<PrismaWasteManagement> {
    return this.prisma.wasteManagement.update(args);
  }
  async deleteWasteManagement(
    args: Prisma.WasteManagementDeleteArgs
  ): Promise<PrismaWasteManagement> {
    return this.prisma.wasteManagement.delete(args);
  }
}
