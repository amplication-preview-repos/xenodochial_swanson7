/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Nutrition } from "./Nutrition";
import { NutritionCountArgs } from "./NutritionCountArgs";
import { NutritionFindManyArgs } from "./NutritionFindManyArgs";
import { NutritionFindUniqueArgs } from "./NutritionFindUniqueArgs";
import { CreateNutritionArgs } from "./CreateNutritionArgs";
import { UpdateNutritionArgs } from "./UpdateNutritionArgs";
import { DeleteNutritionArgs } from "./DeleteNutritionArgs";
import { NutritionService } from "../nutrition.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Nutrition)
export class NutritionResolverBase {
  constructor(
    protected readonly service: NutritionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Nutrition",
    action: "read",
    possession: "any",
  })
  async _nutritionsMeta(
    @graphql.Args() args: NutritionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Nutrition])
  @nestAccessControl.UseRoles({
    resource: "Nutrition",
    action: "read",
    possession: "any",
  })
  async nutritions(
    @graphql.Args() args: NutritionFindManyArgs
  ): Promise<Nutrition[]> {
    return this.service.nutritions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Nutrition, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Nutrition",
    action: "read",
    possession: "own",
  })
  async nutrition(
    @graphql.Args() args: NutritionFindUniqueArgs
  ): Promise<Nutrition | null> {
    const result = await this.service.nutrition(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Nutrition)
  @nestAccessControl.UseRoles({
    resource: "Nutrition",
    action: "create",
    possession: "any",
  })
  async createNutrition(
    @graphql.Args() args: CreateNutritionArgs
  ): Promise<Nutrition> {
    return await this.service.createNutrition({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Nutrition)
  @nestAccessControl.UseRoles({
    resource: "Nutrition",
    action: "update",
    possession: "any",
  })
  async updateNutrition(
    @graphql.Args() args: UpdateNutritionArgs
  ): Promise<Nutrition | null> {
    try {
      return await this.service.updateNutrition({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Nutrition)
  @nestAccessControl.UseRoles({
    resource: "Nutrition",
    action: "delete",
    possession: "any",
  })
  async deleteNutrition(
    @graphql.Args() args: DeleteNutritionArgs
  ): Promise<Nutrition | null> {
    try {
      return await this.service.deleteNutrition(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
