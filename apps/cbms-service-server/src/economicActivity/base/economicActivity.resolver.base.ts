/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EconomicActivity } from "./EconomicActivity";
import { EconomicActivityCountArgs } from "./EconomicActivityCountArgs";
import { EconomicActivityFindManyArgs } from "./EconomicActivityFindManyArgs";
import { EconomicActivityFindUniqueArgs } from "./EconomicActivityFindUniqueArgs";
import { CreateEconomicActivityArgs } from "./CreateEconomicActivityArgs";
import { UpdateEconomicActivityArgs } from "./UpdateEconomicActivityArgs";
import { DeleteEconomicActivityArgs } from "./DeleteEconomicActivityArgs";
import { EconomicActivityService } from "../economicActivity.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EconomicActivity)
export class EconomicActivityResolverBase {
  constructor(
    protected readonly service: EconomicActivityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EconomicActivity",
    action: "read",
    possession: "any",
  })
  async _economicActivitiesMeta(
    @graphql.Args() args: EconomicActivityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EconomicActivity])
  @nestAccessControl.UseRoles({
    resource: "EconomicActivity",
    action: "read",
    possession: "any",
  })
  async economicActivities(
    @graphql.Args() args: EconomicActivityFindManyArgs
  ): Promise<EconomicActivity[]> {
    return this.service.economicActivities(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EconomicActivity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EconomicActivity",
    action: "read",
    possession: "own",
  })
  async economicActivity(
    @graphql.Args() args: EconomicActivityFindUniqueArgs
  ): Promise<EconomicActivity | null> {
    const result = await this.service.economicActivity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EconomicActivity)
  @nestAccessControl.UseRoles({
    resource: "EconomicActivity",
    action: "create",
    possession: "any",
  })
  async createEconomicActivity(
    @graphql.Args() args: CreateEconomicActivityArgs
  ): Promise<EconomicActivity> {
    return await this.service.createEconomicActivity({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EconomicActivity)
  @nestAccessControl.UseRoles({
    resource: "EconomicActivity",
    action: "update",
    possession: "any",
  })
  async updateEconomicActivity(
    @graphql.Args() args: UpdateEconomicActivityArgs
  ): Promise<EconomicActivity | null> {
    try {
      return await this.service.updateEconomicActivity({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EconomicActivity)
  @nestAccessControl.UseRoles({
    resource: "EconomicActivity",
    action: "delete",
    possession: "any",
  })
  async deleteEconomicActivity(
    @graphql.Args() args: DeleteEconomicActivityArgs
  ): Promise<EconomicActivity | null> {
    try {
      return await this.service.deleteEconomicActivity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
