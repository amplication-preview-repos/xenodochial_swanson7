/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AgricultureFarming } from "./AgricultureFarming";
import { AgricultureFarmingCountArgs } from "./AgricultureFarmingCountArgs";
import { AgricultureFarmingFindManyArgs } from "./AgricultureFarmingFindManyArgs";
import { AgricultureFarmingFindUniqueArgs } from "./AgricultureFarmingFindUniqueArgs";
import { CreateAgricultureFarmingArgs } from "./CreateAgricultureFarmingArgs";
import { UpdateAgricultureFarmingArgs } from "./UpdateAgricultureFarmingArgs";
import { DeleteAgricultureFarmingArgs } from "./DeleteAgricultureFarmingArgs";
import { AgricultureFarmingService } from "../agricultureFarming.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AgricultureFarming)
export class AgricultureFarmingResolverBase {
  constructor(
    protected readonly service: AgricultureFarmingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AgricultureFarming",
    action: "read",
    possession: "any",
  })
  async _agricultureFarmingsMeta(
    @graphql.Args() args: AgricultureFarmingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AgricultureFarming])
  @nestAccessControl.UseRoles({
    resource: "AgricultureFarming",
    action: "read",
    possession: "any",
  })
  async agricultureFarmings(
    @graphql.Args() args: AgricultureFarmingFindManyArgs
  ): Promise<AgricultureFarming[]> {
    return this.service.agricultureFarmings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AgricultureFarming, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AgricultureFarming",
    action: "read",
    possession: "own",
  })
  async agricultureFarming(
    @graphql.Args() args: AgricultureFarmingFindUniqueArgs
  ): Promise<AgricultureFarming | null> {
    const result = await this.service.agricultureFarming(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AgricultureFarming)
  @nestAccessControl.UseRoles({
    resource: "AgricultureFarming",
    action: "create",
    possession: "any",
  })
  async createAgricultureFarming(
    @graphql.Args() args: CreateAgricultureFarmingArgs
  ): Promise<AgricultureFarming> {
    return await this.service.createAgricultureFarming({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AgricultureFarming)
  @nestAccessControl.UseRoles({
    resource: "AgricultureFarming",
    action: "update",
    possession: "any",
  })
  async updateAgricultureFarming(
    @graphql.Args() args: UpdateAgricultureFarmingArgs
  ): Promise<AgricultureFarming | null> {
    try {
      return await this.service.updateAgricultureFarming({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AgricultureFarming)
  @nestAccessControl.UseRoles({
    resource: "AgricultureFarming",
    action: "delete",
    possession: "any",
  })
  async deleteAgricultureFarming(
    @graphql.Args() args: DeleteAgricultureFarmingArgs
  ): Promise<AgricultureFarming | null> {
    try {
      return await this.service.deleteAgricultureFarming(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
