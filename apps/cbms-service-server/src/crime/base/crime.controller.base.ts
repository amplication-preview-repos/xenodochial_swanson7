/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CrimeService } from "../crime.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CrimeCreateInput } from "./CrimeCreateInput";
import { Crime } from "./Crime";
import { CrimeFindManyArgs } from "./CrimeFindManyArgs";
import { CrimeWhereUniqueInput } from "./CrimeWhereUniqueInput";
import { CrimeUpdateInput } from "./CrimeUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CrimeControllerBase {
  constructor(
    protected readonly service: CrimeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Crime })
  @nestAccessControl.UseRoles({
    resource: "Crime",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCrime(@common.Body() data: CrimeCreateInput): Promise<Crime> {
    return await this.service.createCrime({
      data: data,
      select: {
        createdAt: true,
        dateOfIncident: true,
        id: true,
        incidentsOfCrime: true,
        locationOfIncident: true,
        natureOfCrime: true,
        outcome: true,
        reportedToAuthorities: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Crime] })
  @ApiNestedQuery(CrimeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Crime",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async crimes(@common.Req() request: Request): Promise<Crime[]> {
    const args = plainToClass(CrimeFindManyArgs, request.query);
    return this.service.crimes({
      ...args,
      select: {
        createdAt: true,
        dateOfIncident: true,
        id: true,
        incidentsOfCrime: true,
        locationOfIncident: true,
        natureOfCrime: true,
        outcome: true,
        reportedToAuthorities: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Crime })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Crime",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async crime(
    @common.Param() params: CrimeWhereUniqueInput
  ): Promise<Crime | null> {
    const result = await this.service.crime({
      where: params,
      select: {
        createdAt: true,
        dateOfIncident: true,
        id: true,
        incidentsOfCrime: true,
        locationOfIncident: true,
        natureOfCrime: true,
        outcome: true,
        reportedToAuthorities: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Crime })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Crime",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCrime(
    @common.Param() params: CrimeWhereUniqueInput,
    @common.Body() data: CrimeUpdateInput
  ): Promise<Crime | null> {
    try {
      return await this.service.updateCrime({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dateOfIncident: true,
          id: true,
          incidentsOfCrime: true,
          locationOfIncident: true,
          natureOfCrime: true,
          outcome: true,
          reportedToAuthorities: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Crime })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Crime",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCrime(
    @common.Param() params: CrimeWhereUniqueInput
  ): Promise<Crime | null> {
    try {
      return await this.service.deleteCrime({
        where: params,
        select: {
          createdAt: true,
          dateOfIncident: true,
          id: true,
          incidentsOfCrime: true,
          locationOfIncident: true,
          natureOfCrime: true,
          outcome: true,
          reportedToAuthorities: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
