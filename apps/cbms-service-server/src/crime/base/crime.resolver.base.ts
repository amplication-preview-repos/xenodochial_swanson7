/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Crime } from "./Crime";
import { CrimeCountArgs } from "./CrimeCountArgs";
import { CrimeFindManyArgs } from "./CrimeFindManyArgs";
import { CrimeFindUniqueArgs } from "./CrimeFindUniqueArgs";
import { CreateCrimeArgs } from "./CreateCrimeArgs";
import { UpdateCrimeArgs } from "./UpdateCrimeArgs";
import { DeleteCrimeArgs } from "./DeleteCrimeArgs";
import { CrimeService } from "../crime.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Crime)
export class CrimeResolverBase {
  constructor(
    protected readonly service: CrimeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Crime",
    action: "read",
    possession: "any",
  })
  async _crimesMeta(
    @graphql.Args() args: CrimeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Crime])
  @nestAccessControl.UseRoles({
    resource: "Crime",
    action: "read",
    possession: "any",
  })
  async crimes(@graphql.Args() args: CrimeFindManyArgs): Promise<Crime[]> {
    return this.service.crimes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Crime, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Crime",
    action: "read",
    possession: "own",
  })
  async crime(
    @graphql.Args() args: CrimeFindUniqueArgs
  ): Promise<Crime | null> {
    const result = await this.service.crime(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Crime)
  @nestAccessControl.UseRoles({
    resource: "Crime",
    action: "create",
    possession: "any",
  })
  async createCrime(@graphql.Args() args: CreateCrimeArgs): Promise<Crime> {
    return await this.service.createCrime({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Crime)
  @nestAccessControl.UseRoles({
    resource: "Crime",
    action: "update",
    possession: "any",
  })
  async updateCrime(
    @graphql.Args() args: UpdateCrimeArgs
  ): Promise<Crime | null> {
    try {
      return await this.service.updateCrime({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Crime)
  @nestAccessControl.UseRoles({
    resource: "Crime",
    action: "delete",
    possession: "any",
  })
  async deleteCrime(
    @graphql.Args() args: DeleteCrimeArgs
  ): Promise<Crime | null> {
    try {
      return await this.service.deleteCrime(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
