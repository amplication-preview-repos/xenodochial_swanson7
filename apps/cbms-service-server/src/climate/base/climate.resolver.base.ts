/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Climate } from "./Climate";
import { ClimateCountArgs } from "./ClimateCountArgs";
import { ClimateFindManyArgs } from "./ClimateFindManyArgs";
import { ClimateFindUniqueArgs } from "./ClimateFindUniqueArgs";
import { CreateClimateArgs } from "./CreateClimateArgs";
import { UpdateClimateArgs } from "./UpdateClimateArgs";
import { DeleteClimateArgs } from "./DeleteClimateArgs";
import { ClimateService } from "../climate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Climate)
export class ClimateResolverBase {
  constructor(
    protected readonly service: ClimateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Climate",
    action: "read",
    possession: "any",
  })
  async _climatesMeta(
    @graphql.Args() args: ClimateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Climate])
  @nestAccessControl.UseRoles({
    resource: "Climate",
    action: "read",
    possession: "any",
  })
  async climates(
    @graphql.Args() args: ClimateFindManyArgs
  ): Promise<Climate[]> {
    return this.service.climates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Climate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Climate",
    action: "read",
    possession: "own",
  })
  async climate(
    @graphql.Args() args: ClimateFindUniqueArgs
  ): Promise<Climate | null> {
    const result = await this.service.climate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Climate)
  @nestAccessControl.UseRoles({
    resource: "Climate",
    action: "create",
    possession: "any",
  })
  async createClimate(
    @graphql.Args() args: CreateClimateArgs
  ): Promise<Climate> {
    return await this.service.createClimate({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Climate)
  @nestAccessControl.UseRoles({
    resource: "Climate",
    action: "update",
    possession: "any",
  })
  async updateClimate(
    @graphql.Args() args: UpdateClimateArgs
  ): Promise<Climate | null> {
    try {
      return await this.service.updateClimate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Climate)
  @nestAccessControl.UseRoles({
    resource: "Climate",
    action: "delete",
    possession: "any",
  })
  async deleteClimate(
    @graphql.Args() args: DeleteClimateArgs
  ): Promise<Climate | null> {
    try {
      return await this.service.deleteClimate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
