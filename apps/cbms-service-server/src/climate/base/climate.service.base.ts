/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Climate as PrismaClimate } from "@prisma/client";

export class ClimateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ClimateCountArgs, "select">): Promise<number> {
    return this.prisma.climate.count(args);
  }

  async climates(args: Prisma.ClimateFindManyArgs): Promise<PrismaClimate[]> {
    return this.prisma.climate.findMany(args);
  }
  async climate(
    args: Prisma.ClimateFindUniqueArgs
  ): Promise<PrismaClimate | null> {
    return this.prisma.climate.findUnique(args);
  }
  async createClimate(args: Prisma.ClimateCreateArgs): Promise<PrismaClimate> {
    return this.prisma.climate.create(args);
  }
  async updateClimate(args: Prisma.ClimateUpdateArgs): Promise<PrismaClimate> {
    return this.prisma.climate.update(args);
  }
  async deleteClimate(args: Prisma.ClimateDeleteArgs): Promise<PrismaClimate> {
    return this.prisma.climate.delete(args);
  }
}
