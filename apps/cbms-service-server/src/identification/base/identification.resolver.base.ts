/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Identification } from "./Identification";
import { IdentificationCountArgs } from "./IdentificationCountArgs";
import { IdentificationFindManyArgs } from "./IdentificationFindManyArgs";
import { IdentificationFindUniqueArgs } from "./IdentificationFindUniqueArgs";
import { CreateIdentificationArgs } from "./CreateIdentificationArgs";
import { UpdateIdentificationArgs } from "./UpdateIdentificationArgs";
import { DeleteIdentificationArgs } from "./DeleteIdentificationArgs";
import { IdentificationService } from "../identification.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Identification)
export class IdentificationResolverBase {
  constructor(
    protected readonly service: IdentificationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Identification",
    action: "read",
    possession: "any",
  })
  async _identificationsMeta(
    @graphql.Args() args: IdentificationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Identification])
  @nestAccessControl.UseRoles({
    resource: "Identification",
    action: "read",
    possession: "any",
  })
  async identifications(
    @graphql.Args() args: IdentificationFindManyArgs
  ): Promise<Identification[]> {
    return this.service.identifications(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Identification, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Identification",
    action: "read",
    possession: "own",
  })
  async identification(
    @graphql.Args() args: IdentificationFindUniqueArgs
  ): Promise<Identification | null> {
    const result = await this.service.identification(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Identification)
  @nestAccessControl.UseRoles({
    resource: "Identification",
    action: "create",
    possession: "any",
  })
  async createIdentification(
    @graphql.Args() args: CreateIdentificationArgs
  ): Promise<Identification> {
    return await this.service.createIdentification({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Identification)
  @nestAccessControl.UseRoles({
    resource: "Identification",
    action: "update",
    possession: "any",
  })
  async updateIdentification(
    @graphql.Args() args: UpdateIdentificationArgs
  ): Promise<Identification | null> {
    try {
      return await this.service.updateIdentification({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Identification)
  @nestAccessControl.UseRoles({
    resource: "Identification",
    action: "delete",
    possession: "any",
  })
  async deleteIdentification(
    @graphql.Args() args: DeleteIdentificationArgs
  ): Promise<Identification | null> {
    try {
      return await this.service.deleteIdentification(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
