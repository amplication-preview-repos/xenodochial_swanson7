/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { LivestockRaising } from "./LivestockRaising";
import { LivestockRaisingCountArgs } from "./LivestockRaisingCountArgs";
import { LivestockRaisingFindManyArgs } from "./LivestockRaisingFindManyArgs";
import { LivestockRaisingFindUniqueArgs } from "./LivestockRaisingFindUniqueArgs";
import { CreateLivestockRaisingArgs } from "./CreateLivestockRaisingArgs";
import { UpdateLivestockRaisingArgs } from "./UpdateLivestockRaisingArgs";
import { DeleteLivestockRaisingArgs } from "./DeleteLivestockRaisingArgs";
import { LivestockRaisingService } from "../livestockRaising.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LivestockRaising)
export class LivestockRaisingResolverBase {
  constructor(
    protected readonly service: LivestockRaisingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LivestockRaising",
    action: "read",
    possession: "any",
  })
  async _livestockRaisingsMeta(
    @graphql.Args() args: LivestockRaisingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LivestockRaising])
  @nestAccessControl.UseRoles({
    resource: "LivestockRaising",
    action: "read",
    possession: "any",
  })
  async livestockRaisings(
    @graphql.Args() args: LivestockRaisingFindManyArgs
  ): Promise<LivestockRaising[]> {
    return this.service.livestockRaisings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LivestockRaising, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LivestockRaising",
    action: "read",
    possession: "own",
  })
  async livestockRaising(
    @graphql.Args() args: LivestockRaisingFindUniqueArgs
  ): Promise<LivestockRaising | null> {
    const result = await this.service.livestockRaising(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LivestockRaising)
  @nestAccessControl.UseRoles({
    resource: "LivestockRaising",
    action: "create",
    possession: "any",
  })
  async createLivestockRaising(
    @graphql.Args() args: CreateLivestockRaisingArgs
  ): Promise<LivestockRaising> {
    return await this.service.createLivestockRaising({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LivestockRaising)
  @nestAccessControl.UseRoles({
    resource: "LivestockRaising",
    action: "update",
    possession: "any",
  })
  async updateLivestockRaising(
    @graphql.Args() args: UpdateLivestockRaisingArgs
  ): Promise<LivestockRaising | null> {
    try {
      return await this.service.updateLivestockRaising({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LivestockRaising)
  @nestAccessControl.UseRoles({
    resource: "LivestockRaising",
    action: "delete",
    possession: "any",
  })
  async deleteLivestockRaising(
    @graphql.Args() args: DeleteLivestockRaisingArgs
  ): Promise<LivestockRaising | null> {
    try {
      return await this.service.deleteLivestockRaising(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
