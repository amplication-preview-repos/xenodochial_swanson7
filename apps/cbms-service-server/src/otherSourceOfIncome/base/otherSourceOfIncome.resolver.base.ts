/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OtherSourceOfIncome } from "./OtherSourceOfIncome";
import { OtherSourceOfIncomeCountArgs } from "./OtherSourceOfIncomeCountArgs";
import { OtherSourceOfIncomeFindManyArgs } from "./OtherSourceOfIncomeFindManyArgs";
import { OtherSourceOfIncomeFindUniqueArgs } from "./OtherSourceOfIncomeFindUniqueArgs";
import { CreateOtherSourceOfIncomeArgs } from "./CreateOtherSourceOfIncomeArgs";
import { UpdateOtherSourceOfIncomeArgs } from "./UpdateOtherSourceOfIncomeArgs";
import { DeleteOtherSourceOfIncomeArgs } from "./DeleteOtherSourceOfIncomeArgs";
import { OtherSourceOfIncomeService } from "../otherSourceOfIncome.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OtherSourceOfIncome)
export class OtherSourceOfIncomeResolverBase {
  constructor(
    protected readonly service: OtherSourceOfIncomeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OtherSourceOfIncome",
    action: "read",
    possession: "any",
  })
  async _otherSourceOfIncomesMeta(
    @graphql.Args() args: OtherSourceOfIncomeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OtherSourceOfIncome])
  @nestAccessControl.UseRoles({
    resource: "OtherSourceOfIncome",
    action: "read",
    possession: "any",
  })
  async otherSourceOfIncomes(
    @graphql.Args() args: OtherSourceOfIncomeFindManyArgs
  ): Promise<OtherSourceOfIncome[]> {
    return this.service.otherSourceOfIncomes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OtherSourceOfIncome, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OtherSourceOfIncome",
    action: "read",
    possession: "own",
  })
  async otherSourceOfIncome(
    @graphql.Args() args: OtherSourceOfIncomeFindUniqueArgs
  ): Promise<OtherSourceOfIncome | null> {
    const result = await this.service.otherSourceOfIncome(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OtherSourceOfIncome)
  @nestAccessControl.UseRoles({
    resource: "OtherSourceOfIncome",
    action: "create",
    possession: "any",
  })
  async createOtherSourceOfIncome(
    @graphql.Args() args: CreateOtherSourceOfIncomeArgs
  ): Promise<OtherSourceOfIncome> {
    return await this.service.createOtherSourceOfIncome({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OtherSourceOfIncome)
  @nestAccessControl.UseRoles({
    resource: "OtherSourceOfIncome",
    action: "update",
    possession: "any",
  })
  async updateOtherSourceOfIncome(
    @graphql.Args() args: UpdateOtherSourceOfIncomeArgs
  ): Promise<OtherSourceOfIncome | null> {
    try {
      return await this.service.updateOtherSourceOfIncome({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OtherSourceOfIncome)
  @nestAccessControl.UseRoles({
    resource: "OtherSourceOfIncome",
    action: "delete",
    possession: "any",
  })
  async deleteOtherSourceOfIncome(
    @graphql.Args() args: DeleteOtherSourceOfIncomeArgs
  ): Promise<OtherSourceOfIncome | null> {
    try {
      return await this.service.deleteOtherSourceOfIncome(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
