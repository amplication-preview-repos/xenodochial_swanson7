/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { OtherSourceOfIncomeService } from "../otherSourceOfIncome.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { OtherSourceOfIncomeCreateInput } from "./OtherSourceOfIncomeCreateInput";
import { OtherSourceOfIncome } from "./OtherSourceOfIncome";
import { OtherSourceOfIncomeFindManyArgs } from "./OtherSourceOfIncomeFindManyArgs";
import { OtherSourceOfIncomeWhereUniqueInput } from "./OtherSourceOfIncomeWhereUniqueInput";
import { OtherSourceOfIncomeUpdateInput } from "./OtherSourceOfIncomeUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class OtherSourceOfIncomeControllerBase {
  constructor(
    protected readonly service: OtherSourceOfIncomeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: OtherSourceOfIncome })
  @nestAccessControl.UseRoles({
    resource: "OtherSourceOfIncome",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createOtherSourceOfIncome(
    @common.Body() data: OtherSourceOfIncomeCreateInput
  ): Promise<OtherSourceOfIncome> {
    return await this.service.createOtherSourceOfIncome({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        frequency: true,
        id: true,
        notes: true,
        sourceDescription: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [OtherSourceOfIncome] })
  @ApiNestedQuery(OtherSourceOfIncomeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OtherSourceOfIncome",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async otherSourceOfIncomes(
    @common.Req() request: Request
  ): Promise<OtherSourceOfIncome[]> {
    const args = plainToClass(OtherSourceOfIncomeFindManyArgs, request.query);
    return this.service.otherSourceOfIncomes({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        frequency: true,
        id: true,
        notes: true,
        sourceDescription: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: OtherSourceOfIncome })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OtherSourceOfIncome",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async otherSourceOfIncome(
    @common.Param() params: OtherSourceOfIncomeWhereUniqueInput
  ): Promise<OtherSourceOfIncome | null> {
    const result = await this.service.otherSourceOfIncome({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        frequency: true,
        id: true,
        notes: true,
        sourceDescription: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: OtherSourceOfIncome })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OtherSourceOfIncome",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateOtherSourceOfIncome(
    @common.Param() params: OtherSourceOfIncomeWhereUniqueInput,
    @common.Body() data: OtherSourceOfIncomeUpdateInput
  ): Promise<OtherSourceOfIncome | null> {
    try {
      return await this.service.updateOtherSourceOfIncome({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          frequency: true,
          id: true,
          notes: true,
          sourceDescription: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: OtherSourceOfIncome })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "OtherSourceOfIncome",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteOtherSourceOfIncome(
    @common.Param() params: OtherSourceOfIncomeWhereUniqueInput
  ): Promise<OtherSourceOfIncome | null> {
    try {
      return await this.service.deleteOtherSourceOfIncome({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          frequency: true,
          id: true,
          notes: true,
          sourceDescription: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
