/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  OtherSourceOfIncome as PrismaOtherSourceOfIncome,
} from "@prisma/client";

export class OtherSourceOfIncomeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OtherSourceOfIncomeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.otherSourceOfIncome.count(args);
  }

  async otherSourceOfIncomes(
    args: Prisma.OtherSourceOfIncomeFindManyArgs
  ): Promise<PrismaOtherSourceOfIncome[]> {
    return this.prisma.otherSourceOfIncome.findMany(args);
  }
  async otherSourceOfIncome(
    args: Prisma.OtherSourceOfIncomeFindUniqueArgs
  ): Promise<PrismaOtherSourceOfIncome | null> {
    return this.prisma.otherSourceOfIncome.findUnique(args);
  }
  async createOtherSourceOfIncome(
    args: Prisma.OtherSourceOfIncomeCreateArgs
  ): Promise<PrismaOtherSourceOfIncome> {
    return this.prisma.otherSourceOfIncome.create(args);
  }
  async updateOtherSourceOfIncome(
    args: Prisma.OtherSourceOfIncomeUpdateArgs
  ): Promise<PrismaOtherSourceOfIncome> {
    return this.prisma.otherSourceOfIncome.update(args);
  }
  async deleteOtherSourceOfIncome(
    args: Prisma.OtherSourceOfIncomeDeleteArgs
  ): Promise<PrismaOtherSourceOfIncome> {
    return this.prisma.otherSourceOfIncome.delete(args);
  }
}
